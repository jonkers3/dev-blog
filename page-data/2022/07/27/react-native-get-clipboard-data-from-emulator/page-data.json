{"componentChunkName":"component---src-templates-post-jsx","path":"/2022/07/27/react-native-get-clipboard-data-from-emulator/","result":{"pageContext":{"node":{"frontmatter":{"title":"React-Native: How to get clipboard data from an Android emulator","date":"July 27, 2022","tags":["Workflow Tips"]},"slug":"2022/07/27/react-native-get-clipboard-data-from-emulator/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React-Native: How to get clipboard data from an Android emulator\",\n  \"date\": \"2022-07-27T00:00:00.000Z\",\n  \"tags\": [\"Workflow Tips\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Using the clipboard in react-native is a breeze thanks to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@react-native-clipboard/clipboard\"), \".\"), mdx(\"p\", null, \"But what about accessing that clipboard data on the host OS? We obviously can't just select text on the emulator screen and copy it, so how to get it?\"), mdx(\"p\", null, \"The following adb command does the trick: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"adb shell input keyevent 279\"), \". Ensure that the clipboard data on the emulator is set, then run this command. It will get the clipboard value from the emulator and set the host OS clipboard to be the same.\"), mdx(\"p\", null, \"A similar command goes the other direction, setting the emulator clipboard contents: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"adb shell input keyevent 278\")), mdx(\"h3\", null, \"Optional: Add a script to your package.json\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=package.json add=2-3 exclude=1,4\",\n    \"file\": \"package.json\",\n    \"add\": \"2-3\",\n    \"exclude\": \"1,4\"\n  }, \"\\\"scripts\\\": {\\n  \\\"receive-clipboard\\\": \\\"adb shell input keyevent 279\\\",\\n  \\\"send-clipboard\\\": \\\"adb shell input keyevent 278\\\"\\n}\\n\")), mdx(\"p\", null, \"Now \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run receive-clipboard\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm run send-clipboard\"), \" will get and set the emulator's clipboard contents.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"prev":{"frontmatter":{"title":"VS Code: How to run npm start on open","date":"July 23, 2022","tags":["VS Code","Workflow Tips"]},"slug":"2022/07/23/vs-code-auto-run-npm-task/","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"VS Code: How to run npm start on open\",\n  \"date\": \"2022-07-23T00:00:00.000Z\",\n  \"tags\": [\"VS Code\", \"Workflow Tips\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For certain projects it's very convenient to run an NPM task automatically when opening their folder in VS Code. Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"presentation.reveal\"), \" to control whether the terminal is automatically shown.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\",\n    \"metastring\": \"file=.vscode/tasks.json\",\n    \"file\": \".vscode/tasks.json\"\n  }, \"{\\n  // See https://go.microsoft.com/fwlink/?LinkId=733558\\n  // for the documentation about the tasks.json format\\n  \\\"version\\\": \\\"2.0.0\\\",\\n  \\\"tasks\\\": [\\n    {\\n      \\\"label\\\": \\\"npm start\\\",\\n      \\\"type\\\": \\\"shell\\\",\\n      \\\"command\\\": \\\"npm start\\\",\\n      \\\"windows\\\": {\\n        \\\"command\\\": \\\"npm start\\\"\\n      },\\n      \\\"presentation\\\": {\\n        \\\"reveal\\\": \\\"always\\\",\\n        \\\"panel\\\": \\\"new\\\"\\n      },\\n      \\\"runOptions\\\": { \\\"runOn\\\": \\\"folderOpen\\\" }\\n    },\\n\\n    ...\\n  ]\\n}\\n\")), mdx(\"p\", null, \"The next time you open the folder, if it doesn't prompt you for permission \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl + Shift + P\"), \" and search for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tasks: Manage Automatic Tasks in Folder\"), \" and set to allow.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":null}},"staticQueryHashes":[]}